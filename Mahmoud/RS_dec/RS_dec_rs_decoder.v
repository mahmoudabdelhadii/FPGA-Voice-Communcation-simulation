// RS_dec_rs_decoder.v

// This file was auto-generated from altera_rs_ser_dec_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.1 196

`timescale 1 ps / 1 ps
module RS_dec_rs_decoder #(
		parameter ERASURE          = 0,
		parameter CHANNEL          = 1,
		parameter BITSPERSYMBOL    = 8,
		parameter CHECK            = 32,
		parameter IRRPOL           = 285,
		parameter N                = 255,
		parameter GENSTART         = 4,
		parameter ROOTSPACE        = 1,
		parameter VARCHECK         = 0,
		parameter VARN             = 0,
		parameter OPTIMIZE_LATENCY = 0,
		parameter MIN_N            = 3,
		parameter USEROM           = 0,
		parameter BMFIXEDLATENCY   = 1,
		parameter USENUMN          = 0,
		parameter USEDUALBASIS     = 0,
		parameter ERRORSYMB        = 0,
		parameter ERRORSYMBCOUNT   = 0,
		parameter ERRORBITCOUNT    = 0,
		parameter BITCOUNTTYPE     = "Full"
	) (
		input  wire       clk_clk,           // clk.clk
		input  wire       rst_reset_n,       // rst.reset_n
		input  wire       in_startofpacket,  //  in.startofpacket
		input  wire       in_endofpacket,    //    .endofpacket
		input  wire       in_valid,          //    .valid
		output wire       in_ready,          //    .ready
		input  wire [7:0] in_data,           //    .data
		output wire       out_startofpacket, // out.startofpacket
		output wire       out_endofpacket,   //    .endofpacket
		output wire       out_error,         //    .error
		output wire       out_valid,         //    .valid
		input  wire       out_ready,         //    .ready
		output wire [7:0] out_data           //    .data
	);

	wire          dec_conv_out_valid;                 // dec_conv:out_valid -> dec_dfa_in:in_valid
	wire    [7:0] dec_conv_out_data;                  // dec_conv:out_data -> dec_dfa_in:in_data
	wire          dec_conv_out_ready;                 // dec_dfa_in:in_ready -> dec_conv:out_ready
	wire          dec_conv_out_startofpacket;         // dec_conv:out_sop -> dec_dfa_in:in_startofpacket
	wire          dec_conv_out_endofpacket;           // dec_conv:out_eop -> dec_dfa_in:in_endofpacket
	wire          dec_dfa_in_out_valid;               // dec_dfa_in:out_valid -> dec_st_splitter:in0_valid
	wire    [7:0] dec_dfa_in_out_data;                // dec_dfa_in:out_data -> dec_st_splitter:in0_data
	wire          dec_dfa_in_out_ready;               // dec_st_splitter:in0_ready -> dec_dfa_in:out_ready
	wire          dec_dfa_in_out_startofpacket;       // dec_dfa_in:out_startofpacket -> dec_st_splitter:in0_startofpacket
	wire          dec_dfa_in_out_endofpacket;         // dec_dfa_in:out_endofpacket -> dec_st_splitter:in0_endofpacket
	wire          dec_dfa_in_out_empty;               // dec_dfa_in:out_empty -> dec_st_splitter:in0_empty
	wire          dec_st_splitter_out0_valid;         // dec_st_splitter:out0_valid -> dec_dfa0:in_valid
	wire    [7:0] dec_st_splitter_out0_data;          // dec_st_splitter:out0_data -> dec_dfa0:in_data
	wire          dec_st_splitter_out0_ready;         // dec_dfa0:in_ready -> dec_st_splitter:out0_ready
	wire          dec_st_splitter_out0_startofpacket; // dec_st_splitter:out0_startofpacket -> dec_dfa0:in_startofpacket
	wire          dec_st_splitter_out0_endofpacket;   // dec_st_splitter:out0_endofpacket -> dec_dfa0:in_endofpacket
	wire    [0:0] dec_st_splitter_out0_empty;         // dec_st_splitter:out0_empty -> dec_dfa0:in_empty
	wire          dec_st_splitter_out1_valid;         // dec_st_splitter:out1_valid -> dec_dfa1:in_valid
	wire    [7:0] dec_st_splitter_out1_data;          // dec_st_splitter:out1_data -> dec_dfa1:in_data
	wire          dec_st_splitter_out1_ready;         // dec_dfa1:in_ready -> dec_st_splitter:out1_ready
	wire          dec_st_splitter_out1_startofpacket; // dec_st_splitter:out1_startofpacket -> dec_dfa1:in_startofpacket
	wire          dec_st_splitter_out1_endofpacket;   // dec_st_splitter:out1_endofpacket -> dec_dfa1:in_endofpacket
	wire    [0:0] dec_st_splitter_out1_empty;         // dec_st_splitter:out1_empty -> dec_dfa1:in_empty
	wire          dec_dfa0_out_valid;                 // dec_dfa0:out_valid -> dec_adapt:cw_in_valid
	wire    [7:0] dec_dfa0_out_data;                  // dec_dfa0:out_data -> dec_adapt:cw_in_data
	wire          dec_dfa0_out_ready;                 // dec_adapt:cw_in_ready -> dec_dfa0:out_ready
	wire          dec_dfa0_out_startofpacket;         // dec_dfa0:out_startofpacket -> dec_adapt:cw_in_sop
	wire          dec_dfa0_out_endofpacket;           // dec_dfa0:out_endofpacket -> dec_adapt:cw_in_eop
	wire          dec_adapt_cw_out_valid;             // dec_adapt:cw_out_valid -> dec_sc_fifo:in_valid
	wire    [7:0] dec_adapt_cw_out_data;              // dec_adapt:cw_out_data -> dec_sc_fifo:in_data
	wire          dec_adapt_cw_out_ready;             // dec_sc_fifo:in_ready -> dec_adapt:cw_out_ready
	wire          dec_adapt_cw_out_startofpacket;     // dec_adapt:cw_out_sop -> dec_sc_fifo:in_startofpacket
	wire          dec_adapt_cw_out_endofpacket;       // dec_adapt:cw_out_eop -> dec_sc_fifo:in_endofpacket
	wire          dec_dfa1_out_valid;                 // dec_dfa1:out_valid -> dec_syn:cw_in_valid
	wire    [7:0] dec_dfa1_out_data;                  // dec_dfa1:out_data -> dec_syn:cw_in_datas
	wire          dec_dfa1_out_ready;                 // dec_syn:cw_in_ready -> dec_dfa1:out_ready
	wire          dec_dfa1_out_startofpacket;         // dec_dfa1:out_startofpacket -> dec_syn:cw_in_sop
	wire          dec_dfa1_out_endofpacket;           // dec_dfa1:out_endofpacket -> dec_syn:cw_in_eop
	wire          dec_syn_syn_out_valid;              // dec_syn:syn_out_valid -> dec_bm:syn_in_valid
	wire  [255:0] dec_syn_syn_out_data;               // dec_syn:syn_out_data -> dec_bm:syn_in_data
	wire          dec_syn_syn_out_ready;              // dec_bm:syn_in_ready -> dec_syn:syn_out_ready
	wire          dec_syn_syn_out_startofpacket;      // dec_syn:syn_out_sop -> dec_bm:syn_in_sop
	wire          dec_syn_syn_out_endofpacket;        // dec_syn:syn_out_eop -> dec_bm:syn_in_eop
	wire          dec_bm_bm_out_valid;                // dec_bm:bm_out_valid -> dec_search:bm_in_valid
	wire  [260:0] dec_bm_bm_out_data;                 // dec_bm:bm_out_data -> dec_search:bm_in_data
	wire          dec_bm_bm_out_ready;                // dec_search:bm_in_ready -> dec_bm:bm_out_ready
	wire          dec_bm_bm_out_startofpacket;        // dec_bm:bm_out_sop -> dec_search:bm_in_sop
	wire          dec_bm_bm_out_endofpacket;          // dec_bm:bm_out_eop -> dec_search:bm_in_eop
	wire          dec_search_sch_out_valid;           // dec_search:sch_out_valid -> dec_correct:sch_in_valid
	wire   [13:0] dec_search_sch_out_data;            // dec_search:sch_out_data -> dec_correct:sch_in_data
	wire          dec_search_sch_out_ready;           // dec_correct:sch_in_ready -> dec_search:sch_out_ready
	wire          dec_search_sch_out_startofpacket;   // dec_search:sch_out_sop -> dec_correct:sch_in_sop
	wire          dec_search_sch_out_endofpacket;     // dec_search:sch_out_eop -> dec_correct:sch_in_eop
	wire          dec_search_sch_out_error;           // dec_search:sch_out_error -> dec_correct:sch_in_error
	wire          dec_sc_fifo_out_valid;              // dec_sc_fifo:out_valid -> dec_correct:cw_in_valid
	wire    [7:0] dec_sc_fifo_out_data;               // dec_sc_fifo:out_data -> dec_correct:cw_in_data
	wire          dec_sc_fifo_out_ready;              // dec_correct:cw_in_ready -> dec_sc_fifo:out_ready
	wire          dec_sc_fifo_out_startofpacket;      // dec_sc_fifo:out_startofpacket -> dec_correct:cw_in_sop
	wire          dec_sc_fifo_out_endofpacket;        // dec_sc_fifo:out_endofpacket -> dec_correct:cw_in_eop
	wire  [255:0] dec_syn_syn_out_synd;               // port fragment
	wire  [127:0] dec_bm_bm_out_error_evaluator;      // port fragment
	wire  [127:0] dec_bm_bm_out_error_locator;        // port fragment
	wire    [4:0] dec_bm_bm_out_error_count;          // port fragment
	wire          dec_search_sch_out_error_location;  // port fragment
	wire    [4:0] dec_search_sch_out_error_count;     // port fragment
	wire    [7:0] dec_search_sch_out_error_magnitude; // port fragment

	generate
		// If any of the display statements (or deliberately broken
		// instantiations) within this generate block triggers then this module
		// has been instantiated this module with a set of parameters different
		// from those it was generated for.  This will usually result in a
		// non-functioning system.
		if (ERASURE != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					erasure_check ( .error(1'b1) );
		end
		if (CHANNEL != 1)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					channel_check ( .error(1'b1) );
		end
		if (BITSPERSYMBOL != 8)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					bitspersymbol_check ( .error(1'b1) );
		end
		if (CHECK != 32)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					check_check ( .error(1'b1) );
		end
		if (IRRPOL != 285)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					irrpol_check ( .error(1'b1) );
		end
		if (N != 255)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					n_check ( .error(1'b1) );
		end
		if (GENSTART != 4)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					genstart_check ( .error(1'b1) );
		end
		if (ROOTSPACE != 1)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					rootspace_check ( .error(1'b1) );
		end
		if (VARCHECK != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					varcheck_check ( .error(1'b1) );
		end
		if (VARN != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					varn_check ( .error(1'b1) );
		end
		if (OPTIMIZE_LATENCY != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					optimize_latency_check ( .error(1'b1) );
		end
		if (MIN_N != 3)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					min_n_check ( .error(1'b1) );
		end
		if (USEROM != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					userom_check ( .error(1'b1) );
		end
		if (BMFIXEDLATENCY != 1)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					bmfixedlatency_check ( .error(1'b1) );
		end
		if (USENUMN != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					usenumn_check ( .error(1'b1) );
		end
		if (USEDUALBASIS != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					usedualbasis_check ( .error(1'b1) );
		end
		if (ERRORSYMB != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					errorsymb_check ( .error(1'b1) );
		end
		if (ERRORSYMBCOUNT != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					errorsymbcount_check ( .error(1'b1) );
		end
		if (ERRORBITCOUNT != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					errorbitcount_check ( .error(1'b1) );
		end
		if (BITCOUNTTYPE != "Full")
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					bitcounttype_check ( .error(1'b1) );
		end
	endgenerate

	altera_rs_ser_transaction_converter #(
		.ERASURE       (0),
		.CHANNEL       (1),
		.BITSPERSYMBOL (8),
		.CHECK         (32),
		.N             (255),
		.VARCHECK      (0),
		.USENUMN       (0)
	) dec_conv (
		.clk         (clk_clk),                    // clk.clk
		.rst         (~rst_reset_n),               // rst.reset
		.in_sop      (in_startofpacket),           //  in.startofpacket
		.in_eop      (in_endofpacket),             //    .endofpacket
		.in_valid    (in_valid),                   //    .valid
		.in_ready    (in_ready),                   //    .ready
		.data        (in_data),                    //    .data
		.out_sop     (dec_conv_out_startofpacket), // out.startofpacket
		.out_eop     (dec_conv_out_endofpacket),   //    .endofpacket
		.out_valid   (dec_conv_out_valid),         //    .valid
		.out_ready   (dec_conv_out_ready),         //    .ready
		.out_data    (dec_conv_out_data),          //    .data
		.in_channel  (1'b0),                       // (terminated)
		.out_channel (),                           // (terminated)
		.in_erasure  (1'b0),                       // (terminated)
		.numn        (8'b00000000),                // (terminated)
		.numcheck    (6'b000000),                  // (terminated)
		.out_erasure ()                            // (terminated)
	);

	RS_dec_rs_decoder_dec_dfa_in dec_dfa_in (
		.clk               (clk_clk),                      //   clk.clk
		.reset_n           (rst_reset_n),                  // reset.reset_n
		.in_data           (dec_conv_out_data),            //    in.data
		.in_valid          (dec_conv_out_valid),           //      .valid
		.in_ready          (dec_conv_out_ready),           //      .ready
		.in_startofpacket  (dec_conv_out_startofpacket),   //      .startofpacket
		.in_endofpacket    (dec_conv_out_endofpacket),     //      .endofpacket
		.out_data          (dec_dfa_in_out_data),          //   out.data
		.out_valid         (dec_dfa_in_out_valid),         //      .valid
		.out_ready         (dec_dfa_in_out_ready),         //      .ready
		.out_startofpacket (dec_dfa_in_out_startofpacket), //      .startofpacket
		.out_endofpacket   (dec_dfa_in_out_endofpacket),   //      .endofpacket
		.out_empty         (dec_dfa_in_out_empty)          //      .empty
	);

	altera_avalon_st_splitter #(
		.NUMBER_OF_OUTPUTS (2),
		.QUALIFY_VALID_OUT (1),
		.USE_PACKETS       (1),
		.DATA_WIDTH        (8),
		.CHANNEL_WIDTH     (1),
		.ERROR_WIDTH       (1),
		.BITS_PER_SYMBOL   (8),
		.EMPTY_WIDTH       (1)
	) dec_st_splitter (
		.clk                 (clk_clk),                            //   clk.clk
		.reset               (~rst_reset_n),                       // reset.reset
		.in0_ready           (dec_dfa_in_out_ready),               //    in.ready
		.in0_valid           (dec_dfa_in_out_valid),               //      .valid
		.in0_startofpacket   (dec_dfa_in_out_startofpacket),       //      .startofpacket
		.in0_endofpacket     (dec_dfa_in_out_endofpacket),         //      .endofpacket
		.in0_empty           (dec_dfa_in_out_empty),               //      .empty
		.in0_data            (dec_dfa_in_out_data),                //      .data
		.out0_ready          (dec_st_splitter_out0_ready),         //  out0.ready
		.out0_valid          (dec_st_splitter_out0_valid),         //      .valid
		.out0_startofpacket  (dec_st_splitter_out0_startofpacket), //      .startofpacket
		.out0_endofpacket    (dec_st_splitter_out0_endofpacket),   //      .endofpacket
		.out0_empty          (dec_st_splitter_out0_empty),         //      .empty
		.out0_data           (dec_st_splitter_out0_data),          //      .data
		.out1_ready          (dec_st_splitter_out1_ready),         //  out1.ready
		.out1_valid          (dec_st_splitter_out1_valid),         //      .valid
		.out1_startofpacket  (dec_st_splitter_out1_startofpacket), //      .startofpacket
		.out1_endofpacket    (dec_st_splitter_out1_endofpacket),   //      .endofpacket
		.out1_empty          (dec_st_splitter_out1_empty),         //      .empty
		.out1_data           (dec_st_splitter_out1_data),          //      .data
		.in0_channel         (1'b0),                               // (terminated)
		.in0_error           (1'b0),                               // (terminated)
		.out0_channel        (),                                   // (terminated)
		.out0_error          (),                                   // (terminated)
		.out1_channel        (),                                   // (terminated)
		.out1_error          (),                                   // (terminated)
		.out2_ready          (1'b1),                               // (terminated)
		.out2_valid          (),                                   // (terminated)
		.out2_startofpacket  (),                                   // (terminated)
		.out2_endofpacket    (),                                   // (terminated)
		.out2_empty          (),                                   // (terminated)
		.out2_channel        (),                                   // (terminated)
		.out2_error          (),                                   // (terminated)
		.out2_data           (),                                   // (terminated)
		.out3_ready          (1'b1),                               // (terminated)
		.out3_valid          (),                                   // (terminated)
		.out3_startofpacket  (),                                   // (terminated)
		.out3_endofpacket    (),                                   // (terminated)
		.out3_empty          (),                                   // (terminated)
		.out3_channel        (),                                   // (terminated)
		.out3_error          (),                                   // (terminated)
		.out3_data           (),                                   // (terminated)
		.out4_ready          (1'b1),                               // (terminated)
		.out4_valid          (),                                   // (terminated)
		.out4_startofpacket  (),                                   // (terminated)
		.out4_endofpacket    (),                                   // (terminated)
		.out4_empty          (),                                   // (terminated)
		.out4_channel        (),                                   // (terminated)
		.out4_error          (),                                   // (terminated)
		.out4_data           (),                                   // (terminated)
		.out5_ready          (1'b1),                               // (terminated)
		.out5_valid          (),                                   // (terminated)
		.out5_startofpacket  (),                                   // (terminated)
		.out5_endofpacket    (),                                   // (terminated)
		.out5_empty          (),                                   // (terminated)
		.out5_channel        (),                                   // (terminated)
		.out5_error          (),                                   // (terminated)
		.out5_data           (),                                   // (terminated)
		.out6_ready          (1'b1),                               // (terminated)
		.out6_valid          (),                                   // (terminated)
		.out6_startofpacket  (),                                   // (terminated)
		.out6_endofpacket    (),                                   // (terminated)
		.out6_empty          (),                                   // (terminated)
		.out6_channel        (),                                   // (terminated)
		.out6_error          (),                                   // (terminated)
		.out6_data           (),                                   // (terminated)
		.out7_ready          (1'b1),                               // (terminated)
		.out7_valid          (),                                   // (terminated)
		.out7_startofpacket  (),                                   // (terminated)
		.out7_endofpacket    (),                                   // (terminated)
		.out7_empty          (),                                   // (terminated)
		.out7_channel        (),                                   // (terminated)
		.out7_error          (),                                   // (terminated)
		.out7_data           (),                                   // (terminated)
		.out8_ready          (1'b1),                               // (terminated)
		.out8_valid          (),                                   // (terminated)
		.out8_startofpacket  (),                                   // (terminated)
		.out8_endofpacket    (),                                   // (terminated)
		.out8_empty          (),                                   // (terminated)
		.out8_channel        (),                                   // (terminated)
		.out8_error          (),                                   // (terminated)
		.out8_data           (),                                   // (terminated)
		.out9_ready          (1'b1),                               // (terminated)
		.out9_valid          (),                                   // (terminated)
		.out9_startofpacket  (),                                   // (terminated)
		.out9_endofpacket    (),                                   // (terminated)
		.out9_empty          (),                                   // (terminated)
		.out9_channel        (),                                   // (terminated)
		.out9_error          (),                                   // (terminated)
		.out9_data           (),                                   // (terminated)
		.out10_ready         (1'b1),                               // (terminated)
		.out10_valid         (),                                   // (terminated)
		.out10_startofpacket (),                                   // (terminated)
		.out10_endofpacket   (),                                   // (terminated)
		.out10_empty         (),                                   // (terminated)
		.out10_channel       (),                                   // (terminated)
		.out10_error         (),                                   // (terminated)
		.out10_data          (),                                   // (terminated)
		.out11_ready         (1'b1),                               // (terminated)
		.out11_valid         (),                                   // (terminated)
		.out11_startofpacket (),                                   // (terminated)
		.out11_endofpacket   (),                                   // (terminated)
		.out11_empty         (),                                   // (terminated)
		.out11_channel       (),                                   // (terminated)
		.out11_error         (),                                   // (terminated)
		.out11_data          (),                                   // (terminated)
		.out12_ready         (1'b1),                               // (terminated)
		.out12_valid         (),                                   // (terminated)
		.out12_startofpacket (),                                   // (terminated)
		.out12_endofpacket   (),                                   // (terminated)
		.out12_empty         (),                                   // (terminated)
		.out12_channel       (),                                   // (terminated)
		.out12_error         (),                                   // (terminated)
		.out12_data          (),                                   // (terminated)
		.out13_ready         (1'b1),                               // (terminated)
		.out13_valid         (),                                   // (terminated)
		.out13_startofpacket (),                                   // (terminated)
		.out13_endofpacket   (),                                   // (terminated)
		.out13_empty         (),                                   // (terminated)
		.out13_channel       (),                                   // (terminated)
		.out13_error         (),                                   // (terminated)
		.out13_data          (),                                   // (terminated)
		.out14_ready         (1'b1),                               // (terminated)
		.out14_valid         (),                                   // (terminated)
		.out14_startofpacket (),                                   // (terminated)
		.out14_endofpacket   (),                                   // (terminated)
		.out14_empty         (),                                   // (terminated)
		.out14_channel       (),                                   // (terminated)
		.out14_error         (),                                   // (terminated)
		.out14_data          (),                                   // (terminated)
		.out15_ready         (1'b1),                               // (terminated)
		.out15_valid         (),                                   // (terminated)
		.out15_startofpacket (),                                   // (terminated)
		.out15_endofpacket   (),                                   // (terminated)
		.out15_empty         (),                                   // (terminated)
		.out15_channel       (),                                   // (terminated)
		.out15_error         (),                                   // (terminated)
		.out15_data          ()                                    // (terminated)
	);

	RS_dec_rs_decoder_dec_dfa0 dec_dfa0 (
		.clk               (clk_clk),                            //   clk.clk
		.reset_n           (rst_reset_n),                        // reset.reset_n
		.in_data           (dec_st_splitter_out0_data),          //    in.data
		.in_valid          (dec_st_splitter_out0_valid),         //      .valid
		.in_ready          (dec_st_splitter_out0_ready),         //      .ready
		.in_startofpacket  (dec_st_splitter_out0_startofpacket), //      .startofpacket
		.in_endofpacket    (dec_st_splitter_out0_endofpacket),   //      .endofpacket
		.in_empty          (dec_st_splitter_out0_empty),         //      .empty
		.out_data          (dec_dfa0_out_data),                  //   out.data
		.out_valid         (dec_dfa0_out_valid),                 //      .valid
		.out_ready         (dec_dfa0_out_ready),                 //      .ready
		.out_startofpacket (dec_dfa0_out_startofpacket),         //      .startofpacket
		.out_endofpacket   (dec_dfa0_out_endofpacket)            //      .endofpacket
	);

	RS_dec_rs_decoder_dec_dfa0 dec_dfa1 (
		.clk               (clk_clk),                            //   clk.clk
		.reset_n           (rst_reset_n),                        // reset.reset_n
		.in_data           (dec_st_splitter_out1_data),          //    in.data
		.in_valid          (dec_st_splitter_out1_valid),         //      .valid
		.in_ready          (dec_st_splitter_out1_ready),         //      .ready
		.in_startofpacket  (dec_st_splitter_out1_startofpacket), //      .startofpacket
		.in_endofpacket    (dec_st_splitter_out1_endofpacket),   //      .endofpacket
		.in_empty          (dec_st_splitter_out1_empty),         //      .empty
		.out_data          (dec_dfa1_out_data),                  //   out.data
		.out_valid         (dec_dfa1_out_valid),                 //      .valid
		.out_ready         (dec_dfa1_out_ready),                 //      .ready
		.out_startofpacket (dec_dfa1_out_startofpacket),         //      .startofpacket
		.out_endofpacket   (dec_dfa1_out_endofpacket)            //      .endofpacket
	);

	altera_rs_ser_transaction_format_adapter #(
		.inBitsPerSymbol  (8),
		.outBitsPerSymbol (8),
		.UseinError       (0),
		.UseoutError      (0),
		.ChannelWidth     (0),
		.MaxChannel       (0)
	) dec_adapt (
		.clk            (clk_clk),                        //    clk.clk
		.rst            (~rst_reset_n),                   //    rst.reset
		.cw_in_sop      (dec_dfa0_out_startofpacket),     //  cw_in.startofpacket
		.cw_in_eop      (dec_dfa0_out_endofpacket),       //       .endofpacket
		.cw_in_valid    (dec_dfa0_out_valid),             //       .valid
		.cw_in_ready    (dec_dfa0_out_ready),             //       .ready
		.cw_in_data     (dec_dfa0_out_data),              //       .data
		.cw_out_sop     (dec_adapt_cw_out_startofpacket), // cw_out.startofpacket
		.cw_out_eop     (dec_adapt_cw_out_endofpacket),   //       .endofpacket
		.cw_out_valid   (dec_adapt_cw_out_valid),         //       .valid
		.cw_out_ready   (dec_adapt_cw_out_ready),         //       .ready
		.cw_out_data    (dec_adapt_cw_out_data),          //       .data
		.cw_in_error    (1'b0),                           // (terminated)
		.cw_out_error   (),                               // (terminated)
		.cw_in_channel  (1'b0),                           // (terminated)
		.cw_out_channel ()                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (8),
		.FIFO_DEPTH          (512),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dec_sc_fifo (
		.clk               (clk_clk),                              //       clk.clk
		.reset             (~rst_reset_n),                         // clk_reset.reset
		.in_data           (dec_adapt_cw_out_data),                //        in.data
		.in_valid          (dec_adapt_cw_out_valid),               //          .valid
		.in_ready          (dec_adapt_cw_out_ready),               //          .ready
		.in_startofpacket  (dec_adapt_cw_out_startofpacket),       //          .startofpacket
		.in_endofpacket    (dec_adapt_cw_out_endofpacket),         //          .endofpacket
		.out_data          (dec_sc_fifo_out_data),                 //       out.data
		.out_valid         (dec_sc_fifo_out_valid),                //          .valid
		.out_ready         (dec_sc_fifo_out_ready),                //          .ready
		.out_startofpacket (dec_sc_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (dec_sc_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                // (terminated)
		.csr_read          (1'b0),                                 // (terminated)
		.csr_write         (1'b0),                                 // (terminated)
		.csr_readdata      (),                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000), // (terminated)
		.almost_full_data  (),                                     // (terminated)
		.almost_empty_data (),                                     // (terminated)
		.in_empty          (1'b0),                                 // (terminated)
		.out_empty         (),                                     // (terminated)
		.in_error          (1'b0),                                 // (terminated)
		.out_error         (),                                     // (terminated)
		.in_channel        (1'b0),                                 // (terminated)
		.out_channel       ()                                      // (terminated)
	);

	RS_dec_rs_decoder_dec_syn #(
		.ERASURE       (0),
		.CHANNEL       (1),
		.BITSPERSYMBOL (8),
		.CHECK         (32),
		.IRRPOL        (285),
		.N             (255),
		.VARCHECK      (0),
		.VARN          (0),
		.GENSTART      (4),
		.ROOTSPACE     (1),
		.MIN_N         (3),
		.USENUMN       (0),
		.USEDUALBASIS  (0)
	) dec_syn (
		.clk              (clk_clk),                       //     clk.clk
		.rst              (~rst_reset_n),                  //     rst.reset
		.cw_in_sop        (dec_dfa1_out_startofpacket),    //   cw_in.startofpacket
		.cw_in_eop        (dec_dfa1_out_endofpacket),      //        .endofpacket
		.cw_in_valid      (dec_dfa1_out_valid),            //        .valid
		.cw_in_ready      (dec_dfa1_out_ready),            //        .ready
		.cw_in_data       (dec_dfa1_out_data[7:0]),        //        .data
		.syn_out_sop      (dec_syn_syn_out_startofpacket), // syn_out.startofpacket
		.syn_out_eop      (dec_syn_syn_out_endofpacket),   //        .endofpacket
		.syn_out_valid    (dec_syn_syn_out_valid),         //        .valid
		.syn_out_ready    (dec_syn_syn_out_ready),         //        .ready
		.syn_out_synd     (dec_syn_syn_out_synd[255:0]),   //        .data
		.cw_in_channel    (1'b0),                          // (terminated)
		.cw_in_erasure    (1'b0),                          // (terminated)
		.cw_in_numn       (8'b00000000),                   // (terminated)
		.cw_in_numcheck   (6'b000000),                     // (terminated)
		.syn_out_numn     (),                              // (terminated)
		.syn_out_numcheck (),                              // (terminated)
		.syn_out_eracnt   (),                              // (terminated)
		.syn_out_erapos   ()                               // (terminated)
	);

	RS_dec_rs_decoder_dec_bm #(
		.ERASURE          (0),
		.CHANNEL          (1),
		.BITSPERSYMBOL    (8),
		.CHECK            (32),
		.IRRPOL           (285),
		.N                (255),
		.GENSTART         (4),
		.ROOTSPACE        (1),
		.VARCHECK         (0),
		.VARN             (0),
		.OPTIMIZE_LATENCY (0),
		.MIN_N            (3),
		.USEROM           (0),
		.BMFIXEDLATENCY   (1)
	) dec_bm (
		.clk                    (clk_clk),                                                                                                                                                                                                                                                               //    clk.clk
		.rst                    (~rst_reset_n),                                                                                                                                                                                                                                                          //    rst.reset
		.syn_in_sop             (dec_syn_syn_out_startofpacket),                                                                                                                                                                                                                                         // syn_in.startofpacket
		.syn_in_eop             (dec_syn_syn_out_endofpacket),                                                                                                                                                                                                                                           //       .endofpacket
		.syn_in_valid           (dec_syn_syn_out_valid),                                                                                                                                                                                                                                                 //       .valid
		.syn_in_ready           (dec_syn_syn_out_ready),                                                                                                                                                                                                                                                 //       .ready
		.syn_in_synd            (dec_syn_syn_out_data[255:0]),                                                                                                                                                                                                                                           //       .data
		.bm_out_sop             (dec_bm_bm_out_startofpacket),                                                                                                                                                                                                                                           // bm_out.startofpacket
		.bm_out_eop             (dec_bm_bm_out_endofpacket),                                                                                                                                                                                                                                             //       .endofpacket
		.bm_out_valid           (dec_bm_bm_out_valid),                                                                                                                                                                                                                                                   //       .valid
		.bm_out_ready           (dec_bm_bm_out_ready),                                                                                                                                                                                                                                                   //       .ready
		.bm_out_error_count     (dec_bm_bm_out_error_count[4:0]),                                                                                                                                                                                                                                        //       .data
		.bm_out_error_evaluator (dec_bm_bm_out_error_evaluator[127:0]),                                                                                                                                                                                                                                  //       .data
		.bm_out_error_locator   (dec_bm_bm_out_error_locator[127:0]),                                                                                                                                                                                                                                    //       .data
		.syn_in_numn            (8'b00000000),                                                                                                                                                                                                                                                           // (terminated)
		.syn_in_numcheck        (6'b000000),                                                                                                                                                                                                                                                             // (terminated)
		.syn_in_eracnt          (6'b000000),                                                                                                                                                                                                                                                             // (terminated)
		.syn_in_erapos          (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), // (terminated)
		.bm_out_locrootini      (),                                                                                                                                                                                                                                                                      // (terminated)
		.bm_out_evalrootini     (),                                                                                                                                                                                                                                                                      // (terminated)
		.bm_out_numn            ()                                                                                                                                                                                                                                                                       // (terminated)
	);

	RS_dec_rs_decoder_dec_search #(
		.ERASURE          (0),
		.CHANNEL          (1),
		.BITSPERSYMBOL    (8),
		.CHECK            (32),
		.IRRPOL           (285),
		.N                (255),
		.GENSTART         (4),
		.ROOTSPACE        (1),
		.VARN             (0),
		.OPTIMIZE_LATENCY (0),
		.USEDUALBASIS     (0)
	) dec_search (
		.clk                     (clk_clk),                                                                                                                               //     clk.clk
		.rst                     (~rst_reset_n),                                                                                                                          //     rst.reset
		.bm_in_sop               (dec_bm_bm_out_startofpacket),                                                                                                           //   bm_in.startofpacket
		.bm_in_eop               (dec_bm_bm_out_endofpacket),                                                                                                             //        .endofpacket
		.bm_in_valid             (dec_bm_bm_out_valid),                                                                                                                   //        .valid
		.bm_in_ready             (dec_bm_bm_out_ready),                                                                                                                   //        .ready
		.bm_in_error_count       (dec_bm_bm_out_data[260:256]),                                                                                                           //        .data
		.bm_in_error_evaluator   (dec_bm_bm_out_data[255:128]),                                                                                                           //        .data
		.bm_in_error_locator     (dec_bm_bm_out_data[127:0]),                                                                                                             //        .data
		.sch_out_sop             (dec_search_sch_out_startofpacket),                                                                                                      // sch_out.startofpacket
		.sch_out_eop             (dec_search_sch_out_endofpacket),                                                                                                        //        .endofpacket
		.sch_out_valid           (dec_search_sch_out_valid),                                                                                                              //        .valid
		.sch_out_error           (dec_search_sch_out_error),                                                                                                              //        .error
		.sch_out_ready           (dec_search_sch_out_ready),                                                                                                              //        .ready
		.sch_out_error_count     (dec_search_sch_out_error_count[4:0]),                                                                                                   //        .data
		.sch_out_error_magnitude (dec_search_sch_out_error_magnitude[7:0]),                                                                                               //        .data
		.sch_out_error_location  (dec_search_sch_out_error_location),                                                                                                     //        .data
		.sch_out_channel         (),                                                                                                                                      // (terminated)
		.bm_in_locrootini        (128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), // (terminated)
		.bm_in_evalrootini       (128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), // (terminated)
		.bm_in_numn              (8'b00000000)                                                                                                                            // (terminated)
	);

	altera_rs_ser_correct #(
		.ERASURE        (0),
		.CHANNEL        (1),
		.BITSPERSYMBOL  (8),
		.CHECK          (32),
		.ERRORSYMB      (0),
		.ERRORSYMBCOUNT (0),
		.ERRORBITCOUNT  (0),
		.BITCOUNTTYPE   ("Full")
	) dec_correct (
		.clk                    (clk_clk),                          //    clk.clk
		.rst                    (~rst_reset_n),                     //    rst.reset
		.cw_in_sop              (dec_sc_fifo_out_startofpacket),    //  cw_in.startofpacket
		.cw_in_eop              (dec_sc_fifo_out_endofpacket),      //       .endofpacket
		.cw_in_valid            (dec_sc_fifo_out_valid),            //       .valid
		.cw_in_ready            (dec_sc_fifo_out_ready),            //       .ready
		.cw_in_data             (dec_sc_fifo_out_data),             //       .data
		.sch_in_sop             (dec_search_sch_out_startofpacket), // sch_in.startofpacket
		.sch_in_eop             (dec_search_sch_out_endofpacket),   //       .endofpacket
		.sch_in_valid           (dec_search_sch_out_valid),         //       .valid
		.sch_in_error           (dec_search_sch_out_error),         //       .error
		.sch_in_ready           (dec_search_sch_out_ready),         //       .ready
		.sch_in_error_count     (dec_search_sch_out_data[13:9]),    //       .data
		.sch_in_error_magnitude (dec_search_sch_out_data[8:1]),     //       .data
		.sch_in_error_location  (dec_search_sch_out_data[0]),       //       .data
		.cw_out_sop             (out_startofpacket),                // cw_out.startofpacket
		.cw_out_eop             (out_endofpacket),                  //       .endofpacket
		.cw_out_error           (out_error),                        //       .error
		.cw_out_valid           (out_valid),                        //       .valid
		.cw_out_ready           (out_ready),                        //       .ready
		.data                   (out_data),                         //       .data
		.cw_in_channel          (1'b0),                             // (terminated)
		.sch_in_channel         (1'b0),                             // (terminated)
		.cw_out_channel         (),                                 // (terminated)
		.num_error_bit          (),                                 // (terminated)
		.num_error_bit0         (),                                 // (terminated)
		.num_error_bit1         (),                                 // (terminated)
		.num_error_symbol       (),                                 // (terminated)
		.error_value            ()                                  // (terminated)
	);

	assign dec_syn_syn_out_data = { dec_syn_syn_out_synd[255:0] };

	assign dec_bm_bm_out_data = { dec_bm_bm_out_error_count[4:0], dec_bm_bm_out_error_evaluator[127:0], dec_bm_bm_out_error_locator[127:0] };

	assign dec_search_sch_out_data = { dec_search_sch_out_error_count[4:0], dec_search_sch_out_error_magnitude[7:0], dec_search_sch_out_error_location };

endmodule
