// ------------------------------------------------------------
// 
// File Name: C:\UBC Summer 2021\gitproject\ELEC391_Final_Project\mike\V_Normal_RC\Filter_for_16PSK\hdlcoder\t4\gm_gm_Modulation_test\FIR_Interpolation
// Created: 2021-06-16 12:13:07
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// ------------------------------------------------------------
// 
// 
// ------------------------------------------------------------
// 
// Module: FIR_Interpolation
// Source Path: /FIR_Interpolation
// 
// ------------------------------------------------------------
// 
// HDL Implementation    : Fully parallel
// Folding Factor        : 1
// Multipliers           : 11



`timescale 1 ns / 1 ns

module FIR_Interpolation
               (
                clk,
                enb_1_1_1,
                reset,
                FIR_Interpolation_in,
                FIR_Interpolation_out
                );

  input   clk; 
  input   enb_1_1_1; 
  input   reset; 
  input   signed [31:0] FIR_Interpolation_in; //sfix32
  output  signed [31:0] FIR_Interpolation_out; //sfix32

////////////////////////////////////////////////////////////////
//Module Architecture: FIR_Interpolation
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [31:0] coeffphase1_1 = 32'hFE769190; //sfix32_En32
  parameter signed [31:0] coeffphase1_2 = 32'h027A065B; //sfix32_En32
  parameter signed [31:0] coeffphase1_3 = 32'hFC9593D0; //sfix32_En32
  parameter signed [31:0] coeffphase1_4 = 32'h0437A42B; //sfix32_En32
  parameter signed [31:0] coeffphase1_5 = 32'hFB3E3DA8; //sfix32_En32
  parameter signed [31:0] coeffphase1_6 = 32'h5F797D02; //sfix32_En32
  parameter signed [31:0] coeffphase1_7 = 32'hFB3E3DA8; //sfix32_En32
  parameter signed [31:0] coeffphase1_8 = 32'h0437A42B; //sfix32_En32
  parameter signed [31:0] coeffphase1_9 = 32'hFC9593D0; //sfix32_En32
  parameter signed [31:0] coeffphase1_10 = 32'h027A065B; //sfix32_En32
  parameter signed [31:0] coeffphase1_11 = 32'hFE769190; //sfix32_En32
  parameter signed [31:0] coeffphase2_1 = 32'hFEAEDE37; //sfix32_En32
  parameter signed [31:0] coeffphase2_2 = 32'h017B7FC6; //sfix32_En32
  parameter signed [31:0] coeffphase2_3 = 32'hFEF35272; //sfix32_En32
  parameter signed [31:0] coeffphase2_4 = 32'hFF411338; //sfix32_En32
  parameter signed [31:0] coeffphase2_5 = 32'h07989857; //sfix32_En32
  parameter signed [31:0] coeffphase2_6 = 32'h5CB41E38; //sfix32_En32
  parameter signed [31:0] coeffphase2_7 = 32'hF293889D; //sfix32_En32
  parameter signed [31:0] coeffphase2_8 = 32'h07B66C20; //sfix32_En32
  parameter signed [31:0] coeffphase2_9 = 32'hFB23833F; //sfix32_En32
  parameter signed [31:0] coeffphase2_10 = 32'h02DFA6ED; //sfix32_En32
  parameter signed [31:0] coeffphase2_11 = 32'h00000000; //sfix32_En32
  parameter signed [31:0] coeffphase3_1 = 32'hFF41D31F; //sfix32_En32
  parameter signed [31:0] coeffphase3_2 = 32'h00000000; //sfix32_En32
  parameter signed [31:0] coeffphase3_3 = 32'h01ECBA18; //sfix32_En32
  parameter signed [31:0] coeffphase3_4 = 32'hF97992DF; //sfix32_En32
  parameter signed [31:0] coeffphase3_5 = 32'h16D67DF3; //sfix32_En32
  parameter signed [31:0] coeffphase3_6 = 32'h54AFFC0D; //sfix32_En32
  parameter signed [31:0] coeffphase3_7 = 32'hEDE4FEE2; //sfix32_En32
  parameter signed [31:0] coeffphase3_8 = 32'h0968E31E; //sfix32_En32
  parameter signed [31:0] coeffphase3_9 = 32'hFABACF3E; //sfix32_En32
  parameter signed [31:0] coeffphase3_10 = 32'h02AFD295; //sfix32_En32
  parameter signed [31:0] coeffphase3_11 = 32'h00000000; //sfix32_En32
  parameter signed [31:0] coeffphase4_1 = 32'h001CEF4D; //sfix32_En32
  parameter signed [31:0] coeffphase4_2 = 32'hFE419182; //sfix32_En32
  parameter signed [31:0] coeffphase4_3 = 32'h050757FC; //sfix32_En32
  parameter signed [31:0] coeffphase4_4 = 32'hF3CB104A; //sfix32_En32
  parameter signed [31:0] coeffphase4_5 = 32'h27BD4BA7; //sfix32_En32
  parameter signed [31:0] coeffphase4_6 = 32'h48471B6B; //sfix32_En32
  parameter signed [31:0] coeffphase4_7 = 32'hED007561; //sfix32_En32
  parameter signed [31:0] coeffphase4_8 = 32'h094E66BA; //sfix32_En32
  parameter signed [31:0] coeffphase4_9 = 32'hFB483162; //sfix32_En32
  parameter signed [31:0] coeffphase4_10 = 32'h0208CF2E; //sfix32_En32
  parameter signed [31:0] coeffphase4_11 = 32'h00000000; //sfix32_En32
  parameter signed [31:0] coeffphase5_1 = 32'h011AD608; //sfix32_En32
  parameter signed [31:0] coeffphase5_2 = 32'hFC90DED2; //sfix32_En32
  parameter signed [31:0] coeffphase5_3 = 32'h07AF282E; //sfix32_En32
  parameter signed [31:0] coeffphase5_4 = 32'hEF46CE33; //sfix32_En32
  parameter signed [31:0] coeffphase5_5 = 32'h38C53EC6; //sfix32_En32
  parameter signed [31:0] coeffphase5_6 = 32'h38C53EC6; //sfix32_En32
  parameter signed [31:0] coeffphase5_7 = 32'hEF46CE33; //sfix32_En32
  parameter signed [31:0] coeffphase5_8 = 32'h07AF282E; //sfix32_En32
  parameter signed [31:0] coeffphase5_9 = 32'hFC90DED2; //sfix32_En32
  parameter signed [31:0] coeffphase5_10 = 32'h011AD608; //sfix32_En32
  parameter signed [31:0] coeffphase5_11 = 32'h00000000; //sfix32_En32
  parameter signed [31:0] coeffphase6_1 = 32'h0208CF2E; //sfix32_En32
  parameter signed [31:0] coeffphase6_2 = 32'hFB483162; //sfix32_En32
  parameter signed [31:0] coeffphase6_3 = 32'h094E66BA; //sfix32_En32
  parameter signed [31:0] coeffphase6_4 = 32'hED007561; //sfix32_En32
  parameter signed [31:0] coeffphase6_5 = 32'h48471B6B; //sfix32_En32
  parameter signed [31:0] coeffphase6_6 = 32'h27BD4BA7; //sfix32_En32
  parameter signed [31:0] coeffphase6_7 = 32'hF3CB104A; //sfix32_En32
  parameter signed [31:0] coeffphase6_8 = 32'h050757FC; //sfix32_En32
  parameter signed [31:0] coeffphase6_9 = 32'hFE419182; //sfix32_En32
  parameter signed [31:0] coeffphase6_10 = 32'h001CEF4D; //sfix32_En32
  parameter signed [31:0] coeffphase6_11 = 32'h00000000; //sfix32_En32
  parameter signed [31:0] coeffphase7_1 = 32'h02AFD295; //sfix32_En32
  parameter signed [31:0] coeffphase7_2 = 32'hFABACF3E; //sfix32_En32
  parameter signed [31:0] coeffphase7_3 = 32'h0968E31E; //sfix32_En32
  parameter signed [31:0] coeffphase7_4 = 32'hEDE4FEE2; //sfix32_En32
  parameter signed [31:0] coeffphase7_5 = 32'h54AFFC0D; //sfix32_En32
  parameter signed [31:0] coeffphase7_6 = 32'h16D67DF3; //sfix32_En32
  parameter signed [31:0] coeffphase7_7 = 32'hF97992DF; //sfix32_En32
  parameter signed [31:0] coeffphase7_8 = 32'h01ECBA18; //sfix32_En32
  parameter signed [31:0] coeffphase7_9 = 32'h00000000; //sfix32_En32
  parameter signed [31:0] coeffphase7_10 = 32'hFF41D31F; //sfix32_En32
  parameter signed [31:0] coeffphase7_11 = 32'h00000000; //sfix32_En32
  parameter signed [31:0] coeffphase8_1 = 32'h02DFA6ED; //sfix32_En32
  parameter signed [31:0] coeffphase8_2 = 32'hFB23833F; //sfix32_En32
  parameter signed [31:0] coeffphase8_3 = 32'h07B66C20; //sfix32_En32
  parameter signed [31:0] coeffphase8_4 = 32'hF293889D; //sfix32_En32
  parameter signed [31:0] coeffphase8_5 = 32'h5CB41E38; //sfix32_En32
  parameter signed [31:0] coeffphase8_6 = 32'h07989857; //sfix32_En32
  parameter signed [31:0] coeffphase8_7 = 32'hFF411338; //sfix32_En32
  parameter signed [31:0] coeffphase8_8 = 32'hFEF35272; //sfix32_En32
  parameter signed [31:0] coeffphase8_9 = 32'h017B7FC6; //sfix32_En32
  parameter signed [31:0] coeffphase8_10 = 32'hFEAEDE37; //sfix32_En32
  parameter signed [31:0] coeffphase8_11 = 32'h00000000; //sfix32_En32

  // Signals
  reg  [2:0] cur_count; // ufix3
  wire phase_7; // boolean
  reg  signed [31:0] delay_pipeline [0:9] ; // sfix32
  wire signed [31:0] product; // sfix32
  wire signed [31:0] product_mux; // sfix32_En32
  wire signed [63:0] mul_temp; // sfix64_En32
  wire signed [31:0] product_1; // sfix32
  wire signed [31:0] product_mux_1; // sfix32_En32
  wire signed [63:0] mul_temp_1; // sfix64_En32
  wire signed [31:0] product_2; // sfix32
  wire signed [31:0] product_mux_2; // sfix32_En32
  wire signed [63:0] mul_temp_2; // sfix64_En32
  wire signed [31:0] product_3; // sfix32
  wire signed [31:0] product_mux_3; // sfix32_En32
  wire signed [63:0] mul_temp_3; // sfix64_En32
  wire signed [31:0] product_4; // sfix32
  wire signed [31:0] product_mux_4; // sfix32_En32
  wire signed [63:0] mul_temp_4; // sfix64_En32
  wire signed [31:0] product_5; // sfix32
  wire signed [31:0] product_mux_5; // sfix32_En32
  wire signed [63:0] mul_temp_5; // sfix64_En32
  wire signed [31:0] product_6; // sfix32
  wire signed [31:0] product_mux_6; // sfix32_En32
  wire signed [63:0] mul_temp_6; // sfix64_En32
  wire signed [31:0] product_7; // sfix32
  wire signed [31:0] product_mux_7; // sfix32_En32
  wire signed [63:0] mul_temp_7; // sfix64_En32
  wire signed [31:0] product_8; // sfix32
  wire signed [31:0] product_mux_8; // sfix32_En32
  wire signed [63:0] mul_temp_8; // sfix64_En32
  wire signed [31:0] product_9; // sfix32
  wire signed [31:0] product_mux_9; // sfix32_En32
  wire signed [63:0] mul_temp_9; // sfix64_En32
  wire signed [31:0] product_10; // sfix32
  wire signed [31:0] product_mux_10; // sfix32_En32
  wire signed [63:0] mul_temp_10; // sfix64_En32
  wire signed [31:0] sum1; // sfix32
  wire signed [31:0] add_cast; // sfix32
  wire signed [31:0] add_cast_1; // sfix32
  wire signed [32:0] add_temp; // sfix33
  wire signed [31:0] sum2; // sfix32
  wire signed [31:0] add_cast_2; // sfix32
  wire signed [31:0] add_cast_3; // sfix32
  wire signed [32:0] add_temp_1; // sfix33
  wire signed [31:0] sum3; // sfix32
  wire signed [31:0] add_cast_4; // sfix32
  wire signed [31:0] add_cast_5; // sfix32
  wire signed [32:0] add_temp_2; // sfix33
  wire signed [31:0] sum4; // sfix32
  wire signed [31:0] add_cast_6; // sfix32
  wire signed [31:0] add_cast_7; // sfix32
  wire signed [32:0] add_temp_3; // sfix33
  wire signed [31:0] sum5; // sfix32
  wire signed [31:0] add_cast_8; // sfix32
  wire signed [31:0] add_cast_9; // sfix32
  wire signed [32:0] add_temp_4; // sfix33
  wire signed [31:0] sum6; // sfix32
  wire signed [31:0] add_cast_10; // sfix32
  wire signed [31:0] add_cast_11; // sfix32
  wire signed [32:0] add_temp_5; // sfix33
  wire signed [31:0] sum7; // sfix32
  wire signed [31:0] add_cast_12; // sfix32
  wire signed [31:0] add_cast_13; // sfix32
  wire signed [32:0] add_temp_6; // sfix33
  wire signed [31:0] sum8; // sfix32
  wire signed [31:0] add_cast_14; // sfix32
  wire signed [31:0] add_cast_15; // sfix32
  wire signed [32:0] add_temp_7; // sfix33
  wire signed [31:0] sum9; // sfix32
  wire signed [31:0] add_cast_16; // sfix32
  wire signed [31:0] add_cast_17; // sfix32
  wire signed [32:0] add_temp_8; // sfix33
  wire signed [31:0] sum10; // sfix32
  wire signed [31:0] add_cast_18; // sfix32
  wire signed [31:0] add_cast_19; // sfix32
  wire signed [32:0] add_temp_9; // sfix33
  reg  signed [31:0] regout; // sfix32
  wire signed [31:0] muxout; // sfix32

  // Block Statements
  always @ (posedge clk or posedge reset)
    begin: ce_output
      if (reset == 1'b1) begin
        cur_count <= 3'b000;
      end
      else begin
        if (enb_1_1_1 == 1'b1) begin
          if (cur_count >= 3'b111) begin
            cur_count <= 3'b000;
          end
          else begin
            cur_count <= cur_count + 3'b001;
          end
        end
      end
    end // ce_output

  assign  phase_7 = (cur_count == 3'b111 && enb_1_1_1 == 1'b1) ? 1'b1 : 1'b0;

  //   ---------------- Delay Registers ----------------

  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 0;
        delay_pipeline[1] <= 0;
        delay_pipeline[2] <= 0;
        delay_pipeline[3] <= 0;
        delay_pipeline[4] <= 0;
        delay_pipeline[5] <= 0;
        delay_pipeline[6] <= 0;
        delay_pipeline[7] <= 0;
        delay_pipeline[8] <= 0;
        delay_pipeline[9] <= 0;
      end
      else begin
        if (phase_7 == 1'b1) begin
          delay_pipeline[0] <= FIR_Interpolation_in;
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
          delay_pipeline[4] <= delay_pipeline[3];
          delay_pipeline[5] <= delay_pipeline[4];
          delay_pipeline[6] <= delay_pipeline[5];
          delay_pipeline[7] <= delay_pipeline[6];
          delay_pipeline[8] <= delay_pipeline[7];
          delay_pipeline[9] <= delay_pipeline[8];
        end
      end
    end // Delay_Pipeline_process


  assign product_mux = (cur_count == 3'b000) ? coeffphase1_11 :
                      (cur_count == 3'b001) ? coeffphase2_11 :
                      (cur_count == 3'b010) ? coeffphase3_11 :
                      (cur_count == 3'b011) ? coeffphase4_11 :
                      (cur_count == 3'b100) ? coeffphase5_11 :
                      (cur_count == 3'b101) ? coeffphase6_11 :
                      (cur_count == 3'b110) ? coeffphase7_11 :
                      coeffphase8_11;
  assign mul_temp = delay_pipeline[9] * product_mux;
  assign product = mul_temp[63:32];

  assign product_mux_1 = (cur_count == 3'b000) ? coeffphase1_10 :
                        (cur_count == 3'b001) ? coeffphase2_10 :
                        (cur_count == 3'b010) ? coeffphase3_10 :
                        (cur_count == 3'b011) ? coeffphase4_10 :
                        (cur_count == 3'b100) ? coeffphase5_10 :
                        (cur_count == 3'b101) ? coeffphase6_10 :
                        (cur_count == 3'b110) ? coeffphase7_10 :
                        coeffphase8_10;
  assign mul_temp_1 = delay_pipeline[8] * product_mux_1;
  assign product_1 = mul_temp_1[63:32];

  assign product_mux_2 = (cur_count == 3'b000) ? coeffphase1_9 :
                        (cur_count == 3'b001) ? coeffphase2_9 :
                        (cur_count == 3'b010) ? coeffphase3_9 :
                        (cur_count == 3'b011) ? coeffphase4_9 :
                        (cur_count == 3'b100) ? coeffphase5_9 :
                        (cur_count == 3'b101) ? coeffphase6_9 :
                        (cur_count == 3'b110) ? coeffphase7_9 :
                        coeffphase8_9;
  assign mul_temp_2 = delay_pipeline[7] * product_mux_2;
  assign product_2 = mul_temp_2[63:32];

  assign product_mux_3 = (cur_count == 3'b000) ? coeffphase1_8 :
                        (cur_count == 3'b001) ? coeffphase2_8 :
                        (cur_count == 3'b010) ? coeffphase3_8 :
                        (cur_count == 3'b011) ? coeffphase4_8 :
                        (cur_count == 3'b100) ? coeffphase5_8 :
                        (cur_count == 3'b101) ? coeffphase6_8 :
                        (cur_count == 3'b110) ? coeffphase7_8 :
                        coeffphase8_8;
  assign mul_temp_3 = delay_pipeline[6] * product_mux_3;
  assign product_3 = mul_temp_3[63:32];

  assign product_mux_4 = (cur_count == 3'b000) ? coeffphase1_7 :
                        (cur_count == 3'b001) ? coeffphase2_7 :
                        (cur_count == 3'b010) ? coeffphase3_7 :
                        (cur_count == 3'b011) ? coeffphase4_7 :
                        (cur_count == 3'b100) ? coeffphase5_7 :
                        (cur_count == 3'b101) ? coeffphase6_7 :
                        (cur_count == 3'b110) ? coeffphase7_7 :
                        coeffphase8_7;
  assign mul_temp_4 = delay_pipeline[5] * product_mux_4;
  assign product_4 = mul_temp_4[63:32];

  assign product_mux_5 = (cur_count == 3'b000) ? coeffphase1_6 :
                        (cur_count == 3'b001) ? coeffphase2_6 :
                        (cur_count == 3'b010) ? coeffphase3_6 :
                        (cur_count == 3'b011) ? coeffphase4_6 :
                        (cur_count == 3'b100) ? coeffphase5_6 :
                        (cur_count == 3'b101) ? coeffphase6_6 :
                        (cur_count == 3'b110) ? coeffphase7_6 :
                        coeffphase8_6;
  assign mul_temp_5 = delay_pipeline[4] * product_mux_5;
  assign product_5 = mul_temp_5[63:32];

  assign product_mux_6 = (cur_count == 3'b000) ? coeffphase1_5 :
                        (cur_count == 3'b001) ? coeffphase2_5 :
                        (cur_count == 3'b010) ? coeffphase3_5 :
                        (cur_count == 3'b011) ? coeffphase4_5 :
                        (cur_count == 3'b100) ? coeffphase5_5 :
                        (cur_count == 3'b101) ? coeffphase6_5 :
                        (cur_count == 3'b110) ? coeffphase7_5 :
                        coeffphase8_5;
  assign mul_temp_6 = delay_pipeline[3] * product_mux_6;
  assign product_6 = mul_temp_6[63:32];

  assign product_mux_7 = (cur_count == 3'b000) ? coeffphase1_4 :
                        (cur_count == 3'b001) ? coeffphase2_4 :
                        (cur_count == 3'b010) ? coeffphase3_4 :
                        (cur_count == 3'b011) ? coeffphase4_4 :
                        (cur_count == 3'b100) ? coeffphase5_4 :
                        (cur_count == 3'b101) ? coeffphase6_4 :
                        (cur_count == 3'b110) ? coeffphase7_4 :
                        coeffphase8_4;
  assign mul_temp_7 = delay_pipeline[2] * product_mux_7;
  assign product_7 = mul_temp_7[63:32];

  assign product_mux_8 = (cur_count == 3'b000) ? coeffphase1_3 :
                        (cur_count == 3'b001) ? coeffphase2_3 :
                        (cur_count == 3'b010) ? coeffphase3_3 :
                        (cur_count == 3'b011) ? coeffphase4_3 :
                        (cur_count == 3'b100) ? coeffphase5_3 :
                        (cur_count == 3'b101) ? coeffphase6_3 :
                        (cur_count == 3'b110) ? coeffphase7_3 :
                        coeffphase8_3;
  assign mul_temp_8 = delay_pipeline[1] * product_mux_8;
  assign product_8 = mul_temp_8[63:32];

  assign product_mux_9 = (cur_count == 3'b000) ? coeffphase1_2 :
                        (cur_count == 3'b001) ? coeffphase2_2 :
                        (cur_count == 3'b010) ? coeffphase3_2 :
                        (cur_count == 3'b011) ? coeffphase4_2 :
                        (cur_count == 3'b100) ? coeffphase5_2 :
                        (cur_count == 3'b101) ? coeffphase6_2 :
                        (cur_count == 3'b110) ? coeffphase7_2 :
                        coeffphase8_2;
  assign mul_temp_9 = delay_pipeline[0] * product_mux_9;
  assign product_9 = mul_temp_9[63:32];

  assign product_mux_10 = (cur_count == 3'b000) ? coeffphase1_1 :
                         (cur_count == 3'b001) ? coeffphase2_1 :
                         (cur_count == 3'b010) ? coeffphase3_1 :
                         (cur_count == 3'b011) ? coeffphase4_1 :
                         (cur_count == 3'b100) ? coeffphase5_1 :
                         (cur_count == 3'b101) ? coeffphase6_1 :
                         (cur_count == 3'b110) ? coeffphase7_1 :
                         coeffphase8_1;
  assign mul_temp_10 = FIR_Interpolation_in * product_mux_10;
  assign product_10 = mul_temp_10[63:32];

  assign add_cast = product_10;
  assign add_cast_1 = product_9;
  assign add_temp = add_cast + add_cast_1;
  assign sum1 = add_temp[31:0];

  assign add_cast_2 = sum1;
  assign add_cast_3 = product_8;
  assign add_temp_1 = add_cast_2 + add_cast_3;
  assign sum2 = add_temp_1[31:0];

  assign add_cast_4 = sum2;
  assign add_cast_5 = product_7;
  assign add_temp_2 = add_cast_4 + add_cast_5;
  assign sum3 = add_temp_2[31:0];

  assign add_cast_6 = sum3;
  assign add_cast_7 = product_6;
  assign add_temp_3 = add_cast_6 + add_cast_7;
  assign sum4 = add_temp_3[31:0];

  assign add_cast_8 = sum4;
  assign add_cast_9 = product_5;
  assign add_temp_4 = add_cast_8 + add_cast_9;
  assign sum5 = add_temp_4[31:0];

  assign add_cast_10 = sum5;
  assign add_cast_11 = product_4;
  assign add_temp_5 = add_cast_10 + add_cast_11;
  assign sum6 = add_temp_5[31:0];

  assign add_cast_12 = sum6;
  assign add_cast_13 = product_3;
  assign add_temp_6 = add_cast_12 + add_cast_13;
  assign sum7 = add_temp_6[31:0];

  assign add_cast_14 = sum7;
  assign add_cast_15 = product_2;
  assign add_temp_7 = add_cast_14 + add_cast_15;
  assign sum8 = add_temp_7[31:0];

  assign add_cast_16 = sum8;
  assign add_cast_17 = product_1;
  assign add_temp_8 = add_cast_16 + add_cast_17;
  assign sum9 = add_temp_8[31:0];

  assign add_cast_18 = sum9;
  assign add_cast_19 = product;
  assign add_temp_9 = add_cast_18 + add_cast_19;
  assign sum10 = add_temp_9[31:0];

  always @ (posedge clk or posedge reset)
    begin: DataHoldRegister_process
      if (reset == 1'b1) begin
        regout <= 0;
      end
      else begin
        if (enb_1_1_1 == 1'b1) begin
          regout <= sum10;
        end
      end
    end // DataHoldRegister_process

  assign muxout = (enb_1_1_1 == 1'b1) ? sum10 :
            regout;
  // Assignment Statements
  assign FIR_Interpolation_out = muxout;
endmodule  // FIR_Interpolation
