// -------------------------------------------------------------
// 
// File Name: C:\Users\huber\Downloads\hdlsrc\HDLAWGNGenerator\HDLAWGNGenerator\TausURNG1.v
// Created: 2021-06-06 18:19:42
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: TausURNG1
// Source Path: HDLAWGNGenerator/AWGNGenerator/GaussianNoiseWithUnitVar/TausUniformRandGen/TausURNG1
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module TausURNG1
          (clk,
           reset,
           enb,
           a);


  input   clk;
  input   reset;
  input   enb;
  output  [31:0] a;  // uint32


  wire [31:0] bitMask_for_Bitwise_Operator1;  // uint32
  reg [31:0] Delay_out1;  // uint32
  wire [31:0] Bitwise_Operator1_out1;  // uint32
  wire [31:0] Bit_Shift2_out1;  // uint32
  wire [31:0] Bitwise_Operator2_out1;  // uint32
  wire [31:0] Bit_Shift_out1;  // uint32
  wire [31:0] Bitwise_Operator_out1;  // uint32
  wire [31:0] Bit_Shift1_out1;  // uint32
  wire [31:0] bitMask_for_Bitwise_Operator4;  // uint32
  reg [31:0] Delay1_out1;  // uint32
  wire [31:0] Bitwise_Operator4_out1;  // uint32
  wire [31:0] Bit_Shift4_out1;  // uint32
  wire [31:0] Bitwise_Operator5_out1;  // uint32
  wire [31:0] Bit_Shift3_out1;  // uint32
  wire [31:0] Bitwise_Operator3_out1;  // uint32
  wire [31:0] Bit_Shift5_out1;  // uint32
  wire [31:0] bitMask_for_Bitwise_Operator7;  // uint32
  reg [31:0] Delay2_out1;  // uint32
  wire [31:0] Bitwise_Operator7_out1;  // uint32
  wire [31:0] Bit_Shift7_out1;  // uint32
  wire [31:0] Bitwise_Operator8_out1;  // uint32
  wire [31:0] Bit_Shift6_out1;  // uint32
  wire [31:0] Bitwise_Operator6_out1;  // uint32
  wire [31:0] Bit_Shift8_out1;  // uint32
  wire [31:0] Bitwise_Operator9_out1;  // uint32

  // S0
  // 
  // S1
  // 
  // S1


  assign bitMask_for_Bitwise_Operator1 = 32'b11111111111111111111111111111110;



  assign Bitwise_Operator1_out1 = Delay_out1 & bitMask_for_Bitwise_Operator1;



  assign Bit_Shift2_out1 = Bitwise_Operator1_out1 <<< 8'd12;



  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 32'b00000000000000000000000001111001;
      end
      else begin
        if (enb) begin
          Delay_out1 <= Bitwise_Operator2_out1;
        end
      end
    end



  assign Bit_Shift_out1 = Delay_out1 <<< 8'd13;



  assign Bitwise_Operator_out1 = Bit_Shift_out1 ^ Delay_out1;



  assign Bit_Shift1_out1 = Bitwise_Operator_out1 >> 8'd19;



  assign Bitwise_Operator2_out1 = Bit_Shift1_out1 ^ Bit_Shift2_out1;



  assign bitMask_for_Bitwise_Operator4 = 32'b11111111111111111111111111111000;



  assign Bitwise_Operator4_out1 = Delay1_out1 & bitMask_for_Bitwise_Operator4;



  assign Bit_Shift4_out1 = Bitwise_Operator4_out1 <<< 8'd4;



  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 32'b00000000000000000000001011001111;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Bitwise_Operator5_out1;
        end
      end
    end



  assign Bit_Shift3_out1 = Delay1_out1 <<< 8'd2;



  assign Bitwise_Operator3_out1 = Bit_Shift3_out1 ^ Delay1_out1;



  assign Bit_Shift5_out1 = Bitwise_Operator3_out1 >> 8'd25;



  assign Bitwise_Operator5_out1 = Bit_Shift5_out1 ^ Bit_Shift4_out1;



  assign bitMask_for_Bitwise_Operator7 = 32'b11111111111111111111111111110000;



  assign Bitwise_Operator7_out1 = Delay2_out1 & bitMask_for_Bitwise_Operator7;



  assign Bit_Shift7_out1 = Bitwise_Operator7_out1 <<< 8'd17;



  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 32'b00000000000000000000000111111111;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Bitwise_Operator8_out1;
        end
      end
    end



  assign Bit_Shift6_out1 = Delay2_out1 <<< 8'd3;



  assign Bitwise_Operator6_out1 = Bit_Shift6_out1 ^ Delay2_out1;



  assign Bit_Shift8_out1 = Bitwise_Operator6_out1 >> 8'd11;



  assign Bitwise_Operator8_out1 = Bit_Shift8_out1 ^ Bit_Shift7_out1;



  assign Bitwise_Operator9_out1 = Bitwise_Operator8_out1 ^ (Bitwise_Operator2_out1 ^ Bitwise_Operator5_out1);



  assign a = Bitwise_Operator9_out1;

endmodule  // TausURNG1

