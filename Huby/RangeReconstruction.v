// -------------------------------------------------------------
// 
// File Name: C:\Users\huber\Downloads\hdlsrc\HDLAWGNGenerator\HDLAWGNGenerator\RangeReconstruction.v
// Created: 2021-06-06 18:19:42
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: RangeReconstruction
// Source Path: HDLAWGNGenerator/AWGNGenerator/GaussianNoiseWithUnitVar/SqrtImplementation/SqrtEval/RangeReconstruction
// Hierarchy Level: 4
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module RangeReconstruction
          (y_f,
           pass,
           exp_f,
           f);


  input   [16:0] y_f;  // ufix17_En13
  input   signed [8:0] pass;  // sfix9
  input   signed [7:0] exp_f;  // int8
  output  [16:0] f;  // ufix17_En13


  wire signed [7:0] Constant_out1;  // int8
  wire signed [7:0] Add_out1;  // int8
  wire signed [7:0] Switch_out1;  // int8
  wire signed [7:0] Shift_Arithmetic_out1;  // int8
  wire signed [8:0] Gain_in0;  // sfix9
  wire signed [15:0] Gain_cast;  // sfix16_En7
  wire signed [8:0] Gain_1;  // sfix9
  wire signed [7:0] Gain_out1;  // int8
  wire shift_arithmetic1_shift_direction;
  wire signed [8:0] shift_arithmetic1_abs_y;  // sfix9
  wire signed [8:0] shift_arithmetic1_abs_1;  // sfix9
  wire [8:0] shift_arithmetic1_shift_value;  // ufix9
  wire [15:0] shift_right_cast;  // uint16
  wire [16:0] shift_arithmetic1_right;  // ufix17_En13
  wire [15:0] shift_left_cast;  // uint16
  wire [16:0] shift_arithmetic1_left;  // ufix17_En13
  wire [16:0] Shift_Arithmetic1_out1;  // ufix17_En13


  assign Constant_out1 = 8'sb00000001;



  assign Add_out1 = Constant_out1 + exp_f;



  assign Switch_out1 = (pass == 9'sb000000000 ? exp_f :
              Add_out1);



  assign Shift_Arithmetic_out1 = Switch_out1 >>> 8'd1;



  assign Gain_1 = {Shift_Arithmetic_out1[7], Shift_Arithmetic_out1};
  assign Gain_in0 =  - (Gain_1);
  assign Gain_cast = {Gain_in0, 7'b0000000};
  assign Gain_out1 = Gain_cast[14:7];



  assign shift_arithmetic1_shift_direction = Gain_out1 < 8'sb00000000;



  assign shift_arithmetic1_abs_1 = {Gain_out1[7], Gain_out1};
  assign shift_arithmetic1_abs_y = (Gain_out1 < 8'sb00000000 ?  - (shift_arithmetic1_abs_1) :
              {Gain_out1[7], Gain_out1});
  assign shift_arithmetic1_shift_value = shift_arithmetic1_abs_y;



  assign shift_right_cast = {7'b0, shift_arithmetic1_shift_value};
  assign shift_arithmetic1_right = y_f >>> shift_right_cast;



  assign shift_left_cast = {7'b0, shift_arithmetic1_shift_value};
  assign shift_arithmetic1_left = y_f <<< shift_left_cast;



  assign Shift_Arithmetic1_out1 = (shift_arithmetic1_shift_direction == 1'b0 ? shift_arithmetic1_right :
              shift_arithmetic1_left);



  assign f = Shift_Arithmetic1_out1;

endmodule  // RangeReconstruction

