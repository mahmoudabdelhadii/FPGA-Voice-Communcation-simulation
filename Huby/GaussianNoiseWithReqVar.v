// -------------------------------------------------------------
// 
// File Name: C:\Users\huber\Downloads\hdlsrc\HDLAWGNGenerator\HDLAWGNGenerator\GaussianNoiseWithReqVar.v
// Created: 2021-06-06 18:19:42
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: GaussianNoiseWithReqVar
// Source Path: HDLAWGNGenerator/AWGNGenerator/GaussianNoiseWithReqVar
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module GaussianNoiseWithReqVar
          (clk,
           reset,
           enb,
           noiseVar,
           x0,
           x1,
           awgn_re,
           awgn_im,
           validOut);


  input   clk;
  input   reset;
  input   enb;
  input   [21:0] noiseVar;  // ufix22_En18
  input   signed [15:0] x0;  // sfix16_En11
  input   signed [15:0] x1;  // sfix16_En11
  output  signed [37:0] awgn_re;  // sfix38_En29
  output  signed [37:0] awgn_im;  // sfix38_En29
  output  validOut;


  wire signed [31:0] Gain_out1_re;  // sfix32_En25
  wire signed [31:0] Gain_out1_im;  // sfix32_En25
  wire signed [32:0] Add1_add_cast;  // sfix33_En25
  wire signed [32:0] Add1_add_cast_1;  // sfix33_En25
  wire signed [32:0] Add1_add_temp;  // sfix33_En25
  wire signed [32:0] Add1_cast;  // sfix33_En25
  wire signed [15:0] Add1_out1_re;  // sfix16_En11
  wire signed [15:0] Add1_out1_im;  // sfix16_En11
  wire signed [22:0] Product1_cast;  // sfix23_En18
  wire signed [38:0] Product1_mul_temp;  // sfix39_En29
  wire signed [37:0] Product1_Re;  // sfix38_En29
  wire signed [22:0] Product11_cast;  // sfix23_En18
  wire signed [38:0] Product11_mul_temp;  // sfix39_En29
  wire signed [37:0] Product1_Im;  // sfix38_En29
  wire Constant1_out1;
  reg  Delay_out1;
  reg  [0:9] Delay2_reg;  // ufix1 [10]
  wire [0:9] Delay2_reg_next;  // ufix1 [10]
  wire Delay2_out1;


  assign Gain_out1_re = 32'sb00000000000000000000000000000000;
  assign Gain_out1_im = {{2{x1[15]}}, {x1, 14'b00000000000000}};



  assign Add1_add_cast = {{3{x0[15]}}, {x0, 14'b00000000000000}};
  assign Add1_add_cast_1 = {Gain_out1_re[31], Gain_out1_re};
  assign Add1_add_temp = Add1_add_cast + Add1_add_cast_1;
  assign Add1_out1_re = Add1_add_temp[29:14];
  assign Add1_cast = {Gain_out1_im[31], Gain_out1_im};
  assign Add1_out1_im = Add1_cast[29:14];



  assign Product1_cast = {1'b0, noiseVar};
  assign Product1_mul_temp = Add1_out1_re * Product1_cast;
  assign Product1_Re = Product1_mul_temp[37:0];



  assign awgn_re = Product1_Re;

  assign Product11_cast = {1'b0, noiseVar};
  assign Product11_mul_temp = Add1_out1_im * Product11_cast;
  assign Product1_Im = Product11_mul_temp[37:0];



  assign awgn_im = Product1_Im;

  assign Constant1_out1 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay_out1 <= Constant1_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_reg[0] <= 1'b0;
        Delay2_reg[1] <= 1'b0;
        Delay2_reg[2] <= 1'b0;
        Delay2_reg[3] <= 1'b0;
        Delay2_reg[4] <= 1'b0;
        Delay2_reg[5] <= 1'b0;
        Delay2_reg[6] <= 1'b0;
        Delay2_reg[7] <= 1'b0;
        Delay2_reg[8] <= 1'b0;
        Delay2_reg[9] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay2_reg[0] <= Delay2_reg_next[0];
          Delay2_reg[1] <= Delay2_reg_next[1];
          Delay2_reg[2] <= Delay2_reg_next[2];
          Delay2_reg[3] <= Delay2_reg_next[3];
          Delay2_reg[4] <= Delay2_reg_next[4];
          Delay2_reg[5] <= Delay2_reg_next[5];
          Delay2_reg[6] <= Delay2_reg_next[6];
          Delay2_reg[7] <= Delay2_reg_next[7];
          Delay2_reg[8] <= Delay2_reg_next[8];
          Delay2_reg[9] <= Delay2_reg_next[9];
        end
      end
    end

  assign Delay2_out1 = Delay2_reg[9];
  assign Delay2_reg_next[0] = Delay_out1;
  assign Delay2_reg_next[1] = Delay2_reg[0];
  assign Delay2_reg_next[2] = Delay2_reg[1];
  assign Delay2_reg_next[3] = Delay2_reg[2];
  assign Delay2_reg_next[4] = Delay2_reg[3];
  assign Delay2_reg_next[5] = Delay2_reg[4];
  assign Delay2_reg_next[6] = Delay2_reg[5];
  assign Delay2_reg_next[7] = Delay2_reg[6];
  assign Delay2_reg_next[8] = Delay2_reg[7];
  assign Delay2_reg_next[9] = Delay2_reg[8];



  assign validOut = Delay2_out1;

endmodule  // GaussianNoiseWithReqVar

