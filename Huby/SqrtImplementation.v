// -------------------------------------------------------------
// 
// File Name: C:\Users\huber\Downloads\hdlsrc\HDLAWGNGenerator\HDLAWGNGenerator\SqrtImplementation.v
// Created: 2021-06-06 18:19:42
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: SqrtImplementation
// Source Path: HDLAWGNGenerator/AWGNGenerator/GaussianNoiseWithUnitVar/SqrtImplementation
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module SqrtImplementation
          (clk,
           reset,
           enb,
           u,
           f);


  input   clk;
  input   reset;
  input   enb;
  input   [30:0] u;  // ufix31_En24
  output  [16:0] f;  // ufix17_En13


  reg [30:0] Delay_reg [0:1];  // ufix31 [2]
  wire [30:0] Delay_reg_next [0:1];  // ufix31_En24 [2]
  wire [30:0] Delay_out1;  // ufix31_En24
  wire [16:0] Constant_out1;  // ufix17_En13
  reg [16:0] Delay1_reg [0:1];  // ufix17 [2]
  wire [16:0] Delay1_reg_next [0:1];  // ufix17_En13 [2]
  wire [16:0] Delay1_out1;  // ufix17_En13
  wire [16:0] SqrtEval_out1;  // ufix17_En13
  wire [16:0] Switch_out1;  // ufix17_En13


  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_reg[0] <= 31'b0000000000000000000000000000000;
        Delay_reg[1] <= 31'b0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay_reg[0] <= Delay_reg_next[0];
          Delay_reg[1] <= Delay_reg_next[1];
        end
      end
    end

  assign Delay_out1 = Delay_reg[1];
  assign Delay_reg_next[0] = u;
  assign Delay_reg_next[1] = Delay_reg[0];



  assign Constant_out1 = 17'b00000000000000000;



  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_reg[0] <= 17'b00000000000000000;
        Delay1_reg[1] <= 17'b00000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_reg[0] <= Delay1_reg_next[0];
          Delay1_reg[1] <= Delay1_reg_next[1];
        end
      end
    end

  assign Delay1_out1 = Delay1_reg[1];
  assign Delay1_reg_next[0] = Constant_out1;
  assign Delay1_reg_next[1] = Delay1_reg[0];



  SqrtEval u_SqrtEval (.clk(clk),
                       .reset(reset),
                       .enb(enb),
                       .u(u),  // ufix31_En24
                       .f(SqrtEval_out1)  // ufix17_En13
                       );

  assign Switch_out1 = (Delay_out1 == 31'b0000000000000000000000000000000 ? Delay1_out1 :
              SqrtEval_out1);



  assign f = Switch_out1;

endmodule  // SqrtImplementation

